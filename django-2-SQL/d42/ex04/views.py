from django.shortcuts import render, redirect
from django.http import HttpResponse
from psycopg2 import extensions
import psycopg2
import os, sys
from .forms import MovieRemoveForm

# Create your views here.
def connect():
	return psycopg2.connect(
		f'''
		dbname={os.getenv('dbname')}
		user={os.getenv('user')}
		password={os.getenv('password')}
		host={os.getenv('host')}
		port={os.getenv('port')}
		'''	
	)

def create_table(conn: extensions.connection, table_name: str):
	cursor = conn.cursor()
	cursor.execute(
	f'''
	CREATE TABLE {table_name} (
		title VARCHAR(64) NOT NULL UNIQUE,
		episode_nb BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
		opening_crawl TEXT,
		director VARCHAR(32) NOT NULL,
		producer VARCHAR(128) NOT NULL,
		release_date DATE NOT NULL
	);
	''')
	conn.commit()

def insert_into(conn: extensions.connection, sql: str):
	cursor = conn.cursor()
	cursor.execute(sql)
	conn.commit()

def init(request):
	try:
		conn = connect()
		try:
			create_table(conn, 'ex04_movies')
			return HttpResponse('OK\n')
		except psycopg2.Error as e:
			conn.rollback()
			return HttpResponse(f'Error: {e}')
		finally:
			conn.close()
		
	except psycopg2.OperationalError:
		return HttpResponse("Error: can not connect database")

def populate(request):
	try:
		conn = connect()
		try:
			insert_into(conn, 
			''' \
			INSERT INTO ex04_movies (title, director, producer, release_date) \
			VALUES \
			('The Phantom Menace', 'Geoge Lucus', 'Rick McCallum', '1999-05-19'), \
			('Attack of the Clones', 'Geoge Lucus', 'Rick McCallum', '2002-05-16'), \
			('Revenge of the Sith', 'Geoge Lucus', 'Rick McCallum', '2005-05-19'), \
			('A New Hope', 'Geoge Lucus', 'Gary Kurtz, Rick McCallum', '1977-05-25'), \
			('The Empire Strikes Back', 'Irvin Kershner', 'Gary Kurtz, Rick McCallum', '1980-05-17'), \
			('Return of the Jedi', 'Richard Marquand', 'Howard G. Kazanjian, George Lucas, Rick McCallum', '1983-05-25'), \
			('The Force Awakens', 'J. J. Abrams', 'Kathleen Kennedy, J. J. Abrams, Bryan Burk', '2015-12-11'); \
			'''
			)
			return HttpResponse('OK\n')
		except psycopg2.Error as e:
			conn.rollback()
			return HttpResponse(f'Error: {e}')
		finally:
			conn.close()

	except psycopg2.OperationalError:
		return HttpResponse("Error: can not connect database")

def display(request):
	try:
		conn = connect()
		try:
			cur = conn.cursor()
			cur.execute("SELECT title, director, producer, release_date FROM ex04_movies;")
			movies = cur.fetchall()
			return render(request, 'ex04/display.html', {"movies": movies})
		except psycopg2.Error as e:
			conn.rollback()
			return HttpResponse(f'Error: {e}')
		finally:
			conn.close()

	except psycopg2.OperationalError:
		return HttpResponse("Error: can not connect database")

def remove(request):
	if request.method == 'POST':
		form = MovieRemoveForm(request.POST)
		if form.is_valid():
			episode_nb = form.cleaned_data['movie']
			try:
				conn = connect()
				try:
					cur = conn.cursor()
					print(f'episode_nb: {episode_nb}', file=sys.stderr)
					cur.execute(f"DELETE FROM ex04_movies WHERE episode_nb=%s;", (episode_nb,))
					conn.commit()
					return redirect('../display/')
				except psycopg2.Error as e:
					conn.rollback()
					return HttpResponse(f'Error: {e}')
				finally:
					conn.close()			
			except psycopg2.OperationalError:
				return HttpResponse("Error: can not connect database")
		else:
			return HttpResponse('Form invalid\n')
	else:
		form = MovieRemoveForm()
		return render(request, 'ex04/remove.html', {'form': form})
